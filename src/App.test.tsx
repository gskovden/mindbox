import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import App from './App'

describe('TEST APP', () => {
  test('should render correctly', () => {
    render(<App />)
    const headingElement = screen.getByRole("heading", { level: 1 })
    const inputElement = screen.getByPlaceholderText(/what needs to be done?/i)
    const buttonElement = screen.getByRole('button', { name: /submit/i })
    expect(headingElement).toBeInTheDocument()
    expect(inputElement).toBeInTheDocument()
    expect(inputElement).toHaveValue('')
    expect(inputElement).toHaveFocus()
    expect(buttonElement).toBeInTheDocument()
    expect(buttonElement).toBeDisabled()
  })

  test('should enable the button once the input field has a value', async () => {
    render(<App />)
    const inputElement = screen.getByPlaceholderText(/what needs to be done?/i)
    const buttonElement = screen.getByRole('button', { name: /submit/i })
    await userEvent.type(inputElement, 'test')
    expect(inputElement).toHaveValue('test')
    expect(buttonElement).toBeEnabled()
  })

  test('should disable the button once the input field is empty', async () => {
    render(<App />)
    const inputElement = screen.getByPlaceholderText(/what needs to be done?/i)
    const buttonElement = screen.getByRole('button', { name: /submit/i })
    await userEvent.type(inputElement, 'test')
    expect(buttonElement).toBeEnabled()
    await userEvent.clear(inputElement)
    expect(buttonElement).toBeDisabled()
  })

  test('should clear the input value once the submit button is clicked', async () => {
    render(<App />)
    const inputElement = screen.getByPlaceholderText(/what needs to be done?/i)
    const buttonElement = screen.getByRole('button', { name: /submit/i })
    await userEvent.type(inputElement, 'test')
    expect(inputElement).toHaveValue('test')
    await userEvent.click(buttonElement)
    expect(inputElement).toHaveValue('')
    expect(buttonElement).toBeDisabled()
  })

  test('should change className when checkbox is clicked', async () => {
    render(<App />)
    const inputElement = screen.getByPlaceholderText(/what needs to be done?/i)
    const buttonElement = screen.getByRole('button', { name: /submit/i })
    await userEvent.type(inputElement, 'test 1')
    await userEvent.click(buttonElement)
    await userEvent.type(inputElement, 'test 2')
    await userEvent.click(buttonElement)
    const todoArr = screen.getAllByLabelText('todo')
    expect(todoArr[0]).toHaveClass('todo')
    expect(todoArr[1]).toHaveClass('todo')
    const checkboxArr = screen.getAllByLabelText('is_completed')
    await userEvent.click(checkboxArr[0])
    expect(todoArr[0]).toHaveClass('todoCompleted')
    expect(todoArr[1]).toHaveClass('todo')
    await userEvent.click(checkboxArr[1])
    expect(todoArr[1]).toHaveClass('todoCompleted')
    await userEvent.click(checkboxArr[0])
    await userEvent.click(checkboxArr[1])
    expect(todoArr[0]).toHaveClass('todo')
    expect(todoArr[1]).toHaveClass('todo')
  })

  test('should remove a todo when clear button is clicked', async () => {
    render(<App />)
    const inputElement = screen.getByPlaceholderText(/what needs to be done?/i)
    const buttonElement = screen.getByRole('button', { name: /submit/i })
    await userEvent.type(inputElement, 'test 1')
    await userEvent.click(buttonElement)
    await userEvent.type(inputElement, 'test 2')
    await userEvent.click(buttonElement)
    const todoArr = screen.getAllByLabelText('todo')
    expect(todoArr[0]).toHaveTextContent('test 1')
    expect(todoArr[1]).toHaveTextContent('test 2')
    expect(todoArr).toHaveLength(2)
    const checkboxArr = screen.getAllByLabelText('is_completed')
    await userEvent.click(checkboxArr[0])
    const clearCompletedButtonElement = screen.getByRole('button', { name: /clearcompleted/i })
    await userEvent.click(clearCompletedButtonElement)
    expect(screen.getAllByLabelText('todo')).toHaveLength(1)
    expect(todoArr[1]).toBeInTheDocument()
    expect(todoArr[0]).not.toBeInTheDocument()
  })
})